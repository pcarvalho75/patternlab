using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Threading;
using System.Xml.Serialization;
using CometWrapper.Properties;

namespace CometWrapper
{
    
    public partial class CometWrapper : UserControl
    {
        DateTime beginTime;
        static int progressValue = 0;
        static string cometCall;
        static string cometParams;

        List<string> enzymes = new List<string>() 
        {
            "No_enzyme",
            "TrypsinNotFollowedByP",
            "Trypsin",
            "Lys_C",
            "Lys_N",
            "Arg_C",
            "Asp_N",
            "CNBr",
            "Glu_C",
            "PepsinA",
            "Chymotrypsin"
        };
        public CometWrapper()
        {
            InitializeComponent();
        }

        private async void buttonGO_Click(object sender, EventArgs e)
        {
            if (!Directory.Exists(textBoxInput.Text))
            {
                MessageBox.Show("Please enter a valid directory containing .RAW, mzML, mzXML or .ms2 files.");
                return;
            }

            DirectoryInfo di = new DirectoryInfo(textBoxInput.Text);

            //Check if there is at least one comet.params file somewhere
            FileInfo [] cometParamFiles = di.GetFiles("*.params", SearchOption.AllDirectories);
            
            if (cometParamFiles.Length == 0)
            {
                MessageBox.Show("Please save a comet.params fire in the search directory.  A file like this one can be generated by clicking on the save button on the left or by pasting a file of your choice in the search directory.");
                return;
            }

            
            richTextBoxLog.Clear();

            //Write the comet Params file and update static variables
            cometParams = richTextBoxVerify.Text;
            cometCall = GetCometPath();
            progressValue = 0;

            tabControl1.SelectedTab = tabPageLog;

            timerMonitorRuns.Start();
            beginTime = DateTime.Now;

            //Get the files to search
            
            FileInfo[] ms2Files;
            FileInfo[] rawFiles;
            FileInfo[] mzMLFiles;
            FileInfo[] mzXMLFiles;
            FileInfo[] mgfFiles;


            if (checkBoxRecursiveDirecorySearch.Checked)
            {
                ms2Files = di.GetFiles("*.ms2", SearchOption.AllDirectories);
                rawFiles = di.GetFiles("*.RAW", SearchOption.AllDirectories);
                mzMLFiles = di.GetFiles("*.mzML", SearchOption.AllDirectories);
                mzXMLFiles = di.GetFiles("*.mzXML", SearchOption.AllDirectories);
                mgfFiles = di.GetFiles("*.mgf", SearchOption.AllDirectories);
            }
            else
            {
                ms2Files = di.GetFiles("*.ms2");
                rawFiles = di.GetFiles("*.RAW");
                mzMLFiles = di.GetFiles("*.mzML");
                mzXMLFiles = di.GetFiles("*.mzXML");
                mgfFiles = di.GetFiles("*.mgf");
            }


            if (ms2Files.Length == 0 && rawFiles.Length == 0 && mzMLFiles.Length == 0 && mzXMLFiles.Length == 0 && mgfFiles.Length == 0)
            {
                MessageBox.Show("No .ms2, mzXML, .mgf, (Thermo) .RAW, or .mzML files found to be searched.");
                buttonGO.Enabled = true;
                return;
            }



            //Now lets select the files to search;
            FileInfo[] filesToSearch = ms2Files.Concat(mzMLFiles).Concat(mzXMLFiles).Concat(mgfFiles).ToArray();

            if (rawFiles.Length >= filesToSearch.Length)
            {
                filesToSearch = rawFiles;
            }

            //We need to do one last check were we donts have comet.params for all directories and our comet params was left in blank
            if (cometParams.Length < 10)
            {
                List<string> allDirs = filesToSearch.Select(a => a.Directory.FullName).Distinct().ToList();
                foreach (string dir in allDirs)
                {
                    DirectoryInfo di2 = new DirectoryInfo(dir);
                    FileInfo [] files = di2.GetFiles("comet.params");
                    if (files.Length < 1)
                    {
                        MessageBox.Show("A uniform comet.params must be saved in all search directories.  Try generating a search parameter file and clicking in the save comet params button.");
                        return;
                    }
                }
            }

            //--------

            //Delete old stuff

            ////First we shall delete previous sqts
            List<FileInfo> previousSQTs = di.GetFiles("*.sqt").ToList();
            if (checkBoxRecursiveDirecorySearch.Checked)
            {
                previousSQTs = di.GetFiles("*.sqt", SearchOption.AllDirectories).ToList();
            }

            foreach (FileInfo f in previousSQTs)
            {
                f.Delete();
            }

            //Update PBar
            progressBar1.Maximum = filesToSearch.Length;
            progressBar1.Value = 0;
            buttonGO.Text = "Working.";
            buttonGO.Enabled = false;

            //-------------------------
            progressValue = 0;
            await Task.Run(
                () => 
                    {
                        foreach (FileInfo fi in filesToSearch)
                        {
                            AppendToLogText("Preparing thread: " + fi.Name + "\n");
                            CallComet(fi, cometCall, cometParams);
                        }
                    }
            );



            //Final tasks to be done when the work is completed
            buttonGO.Enabled = true;

            progressBar1.Value = progressBar1.Maximum;

            double seconds = Math.Ceiling((DateTime.Now - beginTime).TotalSeconds);
            MessageBox.Show("Done searching " + textBoxInput.Text + "\nSeconds taken for search: " + seconds.ToString());


            timerMonitorRuns.Stop();
            buttonGO.Enabled = true;
            buttonGO.Text = "GO!";

            Console.WriteLine("Done searching");
        }

        public static void CallComet(FileInfo fi, string myCometCall, string myCometParams)
        {
            Directory.SetCurrentDirectory(fi.DirectoryName);

            //Make sure comet file exists
            if (!File.Exists(myCometCall))
            {
                throw new Exception("Can't find the comet executable at: " + myCometCall);
            }

            string correctedCommetCall = myCometCall;
            correctedCommetCall = correctedCommetCall.Replace("\\", "/");

            if (!File.Exists(fi.DirectoryName + "/comet.params") || myCometParams.Length > 10)
            {
                StreamWriter sw = new StreamWriter(fi.DirectoryName + "/comet.params");
                sw.Write(myCometParams);
                sw.Close();
            }

            System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo(correctedCommetCall, fi.Name);
            Console.WriteLine("Processing : " + fi.Name);
            Console.WriteLine("Setting current directory for: " + fi.DirectoryName);
            Console.WriteLine(correctedCommetCall + " " + fi.Name);

            //This one works for the penguin and windows
            psi.RedirectStandardOutput = false;
            psi.UseShellExecute = true;
            psi.CreateNoWindow = false;
            psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Minimized;

            System.Diagnostics.Process process = System.Diagnostics.Process.Start(psi);

            process.WaitForExit();

            //Post process sqt result------------------------------
            PostProcess(fi);
            //-------------------------------------------------------




            progressValue++;
        }

        public static void PostProcess(FileInfo fi)
        {

            Console.WriteLine("Post processing sqt result for " + fi.Name);
            //We need to get the name with SQT extension
            string correctedName = fi.Name.Replace(fi.Extension, ".sqt");
            string correctedFullName = fi.Directory.FullName + "/" + correctedName;
            StreamReader sr = new StreamReader(correctedFullName);
            string line = "";
            Dictionary<string, string> varModsAA = new Dictionary<string, string>();
            string varModsNT = "";
            string varModsCT = "";

            StringBuilder sb = new StringBuilder();

            int lineCounter = 0; ;

            while ((line = sr.ReadLine()) != null)
            {
                lineCounter++;


                if (line.StartsWith("H\tDiffMod"))
                {

                    string[] cols = Regex.Split(line, "\t");
                    string[] cols2 = Regex.Split(cols[2], "=");
                    if (cols2[0].Equals("nt]"))
                    {
                        varModsNT = "(" + cols2[1] + ")";
                    }
                    else if (cols2[0].Equals("ct["))
                    {
                        varModsCT = "(" + cols2[1] + ")";
                    }
                    else
                    {
                        string aa = cols2[0].Substring(0, 1);
                        string dif = "(" + cols2[1] + ")";

                        if (aa.Equals("c") || aa.Equals("n"))
                        {
                            aa = "";
                        }

                        varModsAA.Add(cols2[0], aa + dif);
                    }

                }
                else
                {
                    if (line.StartsWith("M\t"))
                    {
                        foreach (KeyValuePair<string, string> kvp in varModsAA)
                        {
                            string nl = line.Replace(kvp.Key, kvp.Value);
                            line = nl;
                        }
                        if (varModsNT.Length > 0)
                        {
                            line = line.Replace("]", "." + varModsNT);
                        }
                        if (varModsCT.Length > 0)
                        {
                            line = line.Replace("[", varModsCT + ".");
                        }
                    }
                }

                sb.AppendLine(line);
            }
            sr.Close();

            StreamWriter sw2 = new StreamWriter(correctedFullName);
            sw2.Write(sb.ToString());
            sw2.Close();
            
        }


        //A way to safely update the log textbox
        delegate void SetLogCallback(string text);

        private void AppendToLogText(string text)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (this.richTextBoxLog.InvokeRequired)
            {
                SetLogCallback d = new SetLogCallback(AppendToLogText);
                this.Invoke(d, new object[] { text });
                this.Update();
            }
            else
            {
                this.richTextBoxLog.AppendText(text);
            }
        }


        //--------------------------------------------------------


        private void CheckForConsistencyInForms(cometParams cp)
        {
            Console.WriteLine("Checking for consistency in forms.");

            if (!Directory.Exists(textBoxInput.Text))
            {
                throw new Exception("Please enter a valid input directory containing .RAW, .mgf, .ms2, or .mzML files");
            }

            List<string> searchDirs = GetDirectoriesWithRawOrMS2orMZMLorMGF();
            if (searchDirs.Count == 0)
            {
                throw new Exception("No .RAW, .mgf, .mzXML, .ms2, or mzML files found for searching.");
            }

            //Verify if we have a comet.params in all directories
            List<string> directories = GetDirectoriesWithRawOrMS2orMZMLorMGF();
            

            //Verify if we have a valid search sequence database
            if (!File.Exists(textBoxSequenceDatabase.Text))
            {
                throw new Exception("No sequence database file found.");
            }

            //Check if at least one ion type is selected
            if (checkBoxIon_B.Checked && checkBoxIon_X.Checked && checkBoxIonA.Checked && checkBoxIonC.Checked && checkBoxIonNL.Checked && checkBoxIonY.Checked && checkBoxIonZ.Checked)
            {
                throw new Exception("At lease one ion type must be selected");
            }

            if (numericUpDownClearMZMin.Value > numericUpDownClearMZMax.Value)
            {
                throw new Exception("Clear MZ Min value must be less than Clear MZ Max value.");
            }

            if (numericUpDownSearchMassMin.Value > numericUpDownSearchMassMax.Value)
            {
                throw new Exception("Search mass maximum must be greater than search mass min.");
            }

            if (cp.MyModificationItems.Count(a => a.isCTerm && !a.isDiff) > 1)
            {
                throw new Exception("Only one static C terminal modification is allowed");
            }

            if (cp.MyModificationItems.Count(a => a.isNTerm && !a.isDiff) > 1)
            {
                throw new Exception("Only one static N terminal modification is allowed");
            }
        }

        public static string GenerateTheSearchParamsString(cometParams cp)
        {

            string cpt = Properties.Settings.Default.CometParamsTemplate;
            cpt = cpt.Replace("[CLEARMZRANGEMAX]", cp.ClearMZRangeMax.ToString());
            cpt = cpt.Replace("[CLEARMZRANGEMIN]", cp.ClearMZRangeMin.ToString());
            
            cpt = cpt.Replace("[ENZYME]", cp.Enzyme.ToString());
            cpt = cpt.Replace("[SAMPLENZYME]", cp.Enzyme.ToString());

            cpt = cpt.Replace("[DIGESTIONSPECIFICITY]", cp.EnzymeSpecificity.ToString());
            cpt = cpt.Replace("[FRAGMENTBINOFFSET]", cp.FragmentBinOffset.ToString());
            cpt = cpt.Replace("[FRAGMENTBINTOLERANCE]", cp.FragmentBinTolerance.ToString());
            cpt = cpt.Replace("[A_ION]", BoolHelper(cp.IonsA));
            cpt = cpt.Replace("[B_ION]", BoolHelper(cp.IonsB));
            cpt = cpt.Replace("[C_ION]", BoolHelper(cp.IonsC));
            cpt = cpt.Replace("[NL_ION]", BoolHelper(cp.IonsNL));
            cpt = cpt.Replace("[X_ION]", BoolHelper(cp.IonsX));
            cpt = cpt.Replace("[Y_ION]", BoolHelper(cp.IonsY));
            cpt = cpt.Replace("[Z_ION]", BoolHelper(cp.IonsZ));
            cpt = cpt.Replace("[MAXVARIABLEMODSPERPEPTIDE]", cp.MaxVariableModsPerPeptide.ToString());
            cpt = cpt.Replace("[MISSEDCLEAVAGES]", cp.MissedCleavages.ToString());
            cpt = cpt.Replace("[PEPTIDEMASSTOLERANCE]", cp.PrecursorMassTolerance.ToString());
            cpt = cpt.Replace("[MASSRANGEMAX]", cp.SearchMassRangeMax.ToString());
            cpt = cpt.Replace("[MASSRANGEMIN]", cp.SearchMassRangeMin.ToString());
            cpt = cpt.Replace("[DBPATH]", cp.SequenceDatabase);
            cpt = cpt.Replace("[THEORETICALFRAGMENTIONS]", cp.TheoreticalFragIons.ToString());

            //Static mods for amino acids
            List<string> staticModKeys = new List<string>() {
                "[ADD_G]", "[ADD_A]", "[ADD_S]", "[ADD_P]", "[ADD_V]", "[ADD_T]", 
                "[ADD_C]", "[ADD_L]", "[ADD_I]", "[ADD_N]", "[ADD_D]", "[ADD_Q]",
                "[ADD_K]", "[ADD_E]", "[ADD_M]", "[ADD_O]", "[ADD_H]", "[ADD_F]",
                "[ADD_R]", "[ADD_Y]", "[ADD_W]", "[ADD_B]", "[ADD_J]", "[ADD_U]",
                "[ADD_X]", "[ADD_Z]"};

            List<Modification> staticMod = cp.MyModificationItems.FindAll(a => !a.isDiff);

            foreach (string smod in staticModKeys)
            {
                string[] cols = Regex.Split(smod, "_");
                cols[1] = cols[1].Remove(1, 1);
                List<Modification> mods = staticMod.FindAll(a => a.Residues.Contains(cols[1]));

                foreach (Modification m in mods)
                {
                    cpt = cpt.Replace(smod, m.MassShift.ToString());
                }

                if (mods.Count == 0)
                {
                    cpt = cpt.Replace(smod, "0.0");
                }
            }

            //Variable mods for amino acids
            List<Modification> varMod = cp.MyModificationItems.FindAll(a => a.isDiff);

            for (int i = 0; i < 6; i++)
            {
                int j = i + 1;
                if (i < varMod.Count)
                {
                    string res = varMod[i].Residues;

                    if (varMod[i].isCTerm)
                    {
                        res += "c";
                    }

                    if (varMod[i].isNTerm)
                    {
                        res = "n" + res;
                    }

                    cpt = cpt.Replace("[VARMOD" + j + "]", varMod[i].MassShift + " " + res + " 0 4 -1 0 0");
                }
                else
                {
                    cpt = cpt.Replace("[VARMOD" + j + "]", "0.0 X 0 3 -1 0 0");
                }
            }

            //C static mod
            List<Modification> CstaticMod = cp.MyModificationItems.FindAll(a => !a.isDiff && a.isCTerm);
            if (CstaticMod.Count > 1)
            {
                throw new Exception("Only 1 C static mod is acceptable");
            }
            if (CstaticMod.Count == 1) 
            {
                cpt = cpt.Replace("[FIXEDCTERMINUS]", CstaticMod[0].MassShift.ToString());
            }
            else
            {
                cpt = cpt.Replace("[FIXEDCTERMINUS]", "0.0");
            }

            //N static mod
            List<Modification> NstaticMod = cp.MyModificationItems.FindAll(a => !a.isDiff && a.isNTerm);
            if (NstaticMod.Count > 1)
            {
                throw new Exception("Only 1 N static mod is acceptable");
            }
            if (NstaticMod.Count == 1)
            {
                cpt = cpt.Replace("[FIXEDNTERMINUS]", NstaticMod[0].MassShift.ToString());
            }
            else
            {
                cpt = cpt.Replace("[FIXEDNTERMINUS]", "0.0");
            }

            return cpt;
        }

        private static string BoolHelper(bool expression)
        {
            if (expression)
            {
                return "1";
            }
            else
            {
                return "0";
            }
        }

        public static string GetCometPath()
        {

            //Verify if the comet files are in the temp directory
            string tmpPath = Path.GetTempPath();
            string oldcomet32FilePath = tmpPath + "/" + "comet.2015020.win32.exe";
            string oldcomet64FilePath = tmpPath + "/" + "comet.2015020.win64.exe";

            string comet32FilePath = tmpPath + "/" + "comet.2016012.win32.exe";
            string comet64FilePath = tmpPath + "/" + "comet.2016012.win64.exe";

            //Delete old versions
            if (!File.Exists(oldcomet32FilePath))
            {
                File.Delete(oldcomet32FilePath);
            }
            if (!File.Exists(oldcomet64FilePath))
            {
                File.Delete(oldcomet64FilePath);
            }

            //Add executables
            if (!File.Exists(comet32FilePath))
            {
                File.WriteAllBytes(comet32FilePath, Resources.comet_2016012_win32);
            }
            if (!File.Exists(comet64FilePath))
            {
                File.WriteAllBytes(comet64FilePath, Resources.comet_2016012_win64);
            }

            //Add latest version

            string cometPath = null;


            if (Environment.Is64BitOperatingSystem)
            {
                // 64-bit
                cometPath = tmpPath + "comet.2016012.win64.exe";
                
            }
            else
            {
                // 32-bit
                cometPath = tmpPath + "comet.2016012.win32.exe";
            }
            return cometPath;
        }




        private void buttonInputDir_Click(object sender, EventArgs e)
        {
            if (folderBrowserDialog1.ShowDialog() != DialogResult.Cancel)
            {
                textBoxInput.Text = folderBrowserDialog1.SelectedPath;
            }
        }

        private void buttonBrowseSequenceDatabase_Click(object sender, EventArgs e)
        {
            if (openFileDialog1.ShowDialog() != DialogResult.Cancel)
            {
                textBoxSequenceDatabase.Text = openFileDialog1.FileName;
            }
        }

        private void CometWrapper_Load(object sender, EventArgs e)
        {


            comboBoxEnzyme.DataSource = enzymes;
            comboBoxEnzyme.SelectedIndex = 1;
            comboBoxEnzymeSpecificity.SelectedIndex = 0;
            comboBoxTheoreticalFragIons.SelectedIndex = 0;
            Control.CheckForIllegalCrossThreadCalls = false; 

            //Load Default search Parameters
            try
            {
                cometParams cp = new cometParams();

                StringReader s = new StringReader(Properties.Settings.Default.SearchSettings);

                XmlSerializer xmlSerializer = new XmlSerializer(cp.GetType());
                cp = (cometParams)xmlSerializer.Deserialize(s);

                //Now we need to update the screen
                UpdateScreenFromSerializedObject(cp);
            }
            catch (Exception e4)
            {
                MessageBox.Show("No default parameters have been set.\n" + e4.Message);
            }
        }



        private void buttonAddMod_Click(object sender, EventArgs e)
        {
            ModificationLibGUI mlg = new ModificationLibGUI();
            mlg.ShowDialog();

            List<Modification> mods = mlg.MySelectedModification;

            foreach (Modification mod in mods)
            {
                int index = dataGridViewModifications.Rows.Add();
                dataGridViewModifications.Rows[index].Cells[0].Value = mod.Name;
                dataGridViewModifications.Rows[index].Cells[1].Value = mod.MassShift;
                dataGridViewModifications.Rows[index].Cells[2].Value = mod.Residues;

            }
        }

        //--------------------------------------------
        private cometParams GetCometParamsFromScreen()
        {
            cometParams cp = new cometParams();

            cp.SequenceDatabase = textBoxSequenceDatabase.Text;
            cp.IonsA = checkBoxIonA.Checked;
            cp.IonsB = checkBoxIon_B.Checked;
            cp.IonsC = checkBoxIonC.Checked;
            cp.IonsX = checkBoxIon_X.Checked;
            cp.IonsY = checkBoxIonY.Checked;
            cp.IonsZ = checkBoxIonZ.Checked;
            cp.IonsNL = checkBoxIonNL.Checked;

            cp.PrecursorMassTolerance = (double)numericUpDownPrecursorMassTolerance.Value;
            cp.Enzyme = comboBoxEnzyme.SelectedIndex;
            cp.EnzymeSpecificity = comboBoxEnzymeSpecificity.SelectedIndex + 1;
            cp.MissedCleavages = (int)numericUpDownAllowedMissedCleavages.Value;
            cp.FragmentBinTolerance = (double)numericUpDownFragmentBinTolerance.Value;
            cp.FragmentBinOffset = (double)numericUpDownFragBinOffset.Value;

            if ((int)comboBoxTheoreticalFragIons.SelectedIndex == 0) 
            {
                cp.TheoreticalFragIons = 1;
            } else 
            {
                cp.TheoreticalFragIons = 0;
            }


            cp.MaxVariableModsPerPeptide = (int)numericUpDownMaxVariableModsPerPeptides.Value;

            cp.ClearMZRangeMin = (double)numericUpDownClearMZMin.Value;
            cp.ClearMZRangeMax = (double)numericUpDownClearMZMax.Value;

            cp.SearchMassRangeMin = (double)numericUpDownSearchMassMin.Value;
            cp.SearchMassRangeMax = (double)numericUpDownSearchMassMax.Value;

            cp.MyModificationItems = GetModsFromTable();

            return cp;

        }

        private void UpdateScreenFromSerializedObject(global::CometWrapper.cometParams cp)
        {
            numericUpDownClearMZMax.Value = (decimal)cp.ClearMZRangeMax;
            numericUpDownClearMZMin.Value = (decimal)cp.ClearMZRangeMin;
            comboBoxEnzyme.SelectedIndex = cp.Enzyme; //Need to make sure
            comboBoxEnzymeSpecificity.SelectedIndex = cp.EnzymeSpecificity - 1;
            numericUpDownFragBinOffset.Value = (decimal)cp.FragmentBinOffset;
            numericUpDownFragmentBinTolerance.Value =  (decimal)cp.FragmentBinTolerance;
            
            checkBoxIonA.Checked = cp.IonsA;
            checkBoxIon_B.Checked = cp.IonsB;
            checkBoxIonC.Checked = cp.IonsC;
            checkBoxIon_X.Checked = cp.IonsX;
            checkBoxIonY.Checked = cp.IonsY;
            checkBoxIonZ.Checked = cp.IonsZ;
            checkBoxIonNL.Checked = cp.IonsNL;

            numericUpDownMaxVariableModsPerPeptides.Value = cp.MaxVariableModsPerPeptide;
            numericUpDownAllowedMissedCleavages.Value = cp.MissedCleavages;
            numericUpDownPrecursorMassTolerance.Value = (decimal)cp.PrecursorMassTolerance;
            numericUpDownSearchMassMax.Value = (decimal)cp.SearchMassRangeMax;
            numericUpDownSearchMassMin.Value = (decimal)cp.SearchMassRangeMin;
            textBoxSequenceDatabase.Text = cp.SequenceDatabase;

            if (cp.TheoreticalFragIons == 1)
            {
                comboBoxTheoreticalFragIons.SelectedIndex = 0;
            } else
            {
                comboBoxTheoreticalFragIons.SelectedIndex = 1;
            }
           

            dataGridViewModifications.Rows.Clear();
            foreach (Modification m in cp.MyModificationItems)
            {
                int index = dataGridViewModifications.Rows.Add();
                dataGridViewModifications.Rows[index].Cells[0].Value = m.Name;
                dataGridViewModifications.Rows[index].Cells[1].Value = m.MassShift;
                dataGridViewModifications.Rows[index].Cells[2].Value = m.Residues;
                dataGridViewModifications.Rows[index].Cells[3].Value = m.isDiff;
                dataGridViewModifications.Rows[index].Cells[4].Value = m.isNTerm;
                dataGridViewModifications.Rows[index].Cells[5].Value = m.isCTerm;

            }

            Console.WriteLine("Default parameters loaded");

            

        }

        //-----------------------------------------------------------

        private List<Modification> GetModsFromTable()
        {

            List<Modification> mods = new List<Modification>();

            for (int i = 0; i < dataGridViewModifications.Rows.Count - 1; i++)
            {

                decimal massShift = decimal.Parse(dataGridViewModifications.Rows[i].Cells[1].Value.ToString());
                string symbol = "(" + dataGridViewModifications.Rows[i].Cells[1].Value.ToString() + ")";
                bool isDiff = false;
                try
                {
                    isDiff = bool.Parse(dataGridViewModifications.Rows[i].Cells[3].Value.ToString());
                }
                catch
                {
                    Console.WriteLine("");
                }
                

                bool isCTerm = false;
                try
                {
                    isCTerm = bool.Parse(dataGridViewModifications.Rows[i].Cells[5].Value.ToString());
                }
                catch
                {
                    Console.WriteLine("");
                }
                

                bool isNTerm = false;
                try
                {
                    isNTerm = bool.Parse(dataGridViewModifications.Rows[i].Cells[4].Value.ToString());
                }
                catch { }


                Modification m = new Modification();
                m.isCTerm = isCTerm;
                m.isNTerm = isNTerm;
                m.isDiff = isDiff;
                m.MassShift = massShift;
                m.Symbol = symbol;

                if (dataGridViewModifications.Rows[i].Cells[2].Value == null)
                {
                    m.Residues = "";
                }
                else
                {
                    m.Residues = dataGridViewModifications.Rows[i].Cells[2].Value.ToString();
                }


                m.Name = dataGridViewModifications.Rows[i].Cells[0].Value.ToString();

                mods.Add(m);
               
            }

            return mods;

        }

        private void buttonGenerateCommetParams_Click(object sender, EventArgs e)
        {
            cometParams cp = GetCometParamsFromScreen();

            try
            {
                CheckForConsistencyInForms(cp);
            }
            catch (Exception e3)
            { 
                MessageBox.Show(e3.Message);
                return;
            }

            string cpf = GenerateTheSearchParamsString(cp);

            //Serialize it and check if it is different than the default parameters
            //If it is different, we ask the user if the default parameters should be updated
            string serializedCometParams = cp.SerializeToXML();
            if (!serializedCometParams.Equals(Properties.Settings.Default.SearchSettings))
            {
                if (MessageBox.Show("Update default search parameters ?", "Default parameters", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    Settings.Default.SearchSettings = serializedCometParams;
                    Settings.Default.Save();
                }
                
            }

            richTextBoxVerify.Text = cpf;
            tabControl1.SelectedTab = tabPageVerify;
        }

        

        private void buttonSaveParamFiles_Click(object sender, EventArgs e)
        {
            List<string> directories = GetDirectoriesWithRawOrMS2orMZMLorMGF();

            foreach (string d in directories)
            {
                StreamWriter sw = new StreamWriter(d + "/" + "comet.params");
                sw.WriteLine(richTextBoxVerify.Text);
                sw.Close();
            }

            MessageBox.Show("Done saving comet.params");

            Console.WriteLine(".");
        }

        private List<string> GetDirectoriesWithRawOrMS2orMZMLorMGF()
        {
            DirectoryInfo di = new DirectoryInfo(textBoxInput.Text);
            List<FileInfo> files = new List<FileInfo>();

            if (checkBoxRecursiveDirecorySearch.Checked)
            {
                files.AddRange(di.GetFiles("*.RAW", SearchOption.AllDirectories));
                files.AddRange(di.GetFiles("*.ms2", SearchOption.AllDirectories));
                files.AddRange(di.GetFiles("*.mzML", SearchOption.AllDirectories));
                files.AddRange(di.GetFiles("*.mzXML", SearchOption.AllDirectories));
                files.AddRange(di.GetFiles("*.mgf", SearchOption.AllDirectories));

            }
            else
            {
                files.AddRange(di.GetFiles("*.RAW"));
                files.AddRange(di.GetFiles("*.ms2"));
                files.AddRange(di.GetFiles("*.mzML"));
                files.AddRange(di.GetFiles("*.mzXML"));
                files.AddRange(di.GetFiles("*.mgf"));
            }
            List<string> directories = files.Select(a => a.DirectoryName).Distinct().ToList();
            return directories;
        }

        private void timerMonitorRuns_Tick(object sender, EventArgs e)
        {
            progressBar1.Value = progressValue;
            this.Update();
        }



        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            PatternTools.WebBrowser.Browser browser = new PatternTools.WebBrowser.Browser();
            browser.SetURL("https://thermo.flexnetoperations.com/control/thmo/login?nextURL=%2Fcontrol%2Fthmo%2Fdownload%3Felement%3D6306677");
            browser.ShowDialog();
        }

        private void linkLabelComet_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            PatternTools.WebBrowser.Browser browser = new PatternTools.WebBrowser.Browser();
            browser.SetURL("http://comet-ms.sourceforge.net/");
            browser.ShowDialog();
        }
    }
}
